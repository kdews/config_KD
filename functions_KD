# User-specific functions
#
# Function to quickly push changes to GitHub from remote git repo
gitpublish() {
	# $1 is the commit message
	# $2 (if given) is /path/to/repo
	# Help message
	if (( $# < 1  )) || (( $# > 2 )) || [[ $1 == "-h" ]] || \
[[ $1 == "--help" ]]
	then
		echo \
"$# options given to gitpublish: $@

Function pushes repository to GitHub with commit message specified by 
<commit_msg>. If target repository is not the current directory, specify 
[/path/to/repo].

Usage: gitpublish <commit_msg> [/path/to/repo]"
	# Run in current directory (./)
	elif (( $# == 1 ))
	then
		git add -v --all
		git commit -m "$1"
		git push -v
	# Handle second positional argument
	elif (( $# == 2 ))
	then
		git -C "$2" add -v --all
		git -C "$2" commit -m "$1"
		git -C "$2" push -v
	fi
}


# Function to get job info from SLURM "sacct" for a specific
# job name and start date
getjobinfo () {
	# $1 is the job name
	# $2 is the start date 
	# (prints info for all jobs starting on 'date' at 00:00:00)
	# accepted input format for --starttime: YYYY-MM-DD[THH:MM[:SS]]
	# Help message
	if (( $# < 2 )) || [[ $1 == "-h" ]] || [[ $1 == "--help" ]]
	then
		echo \
"Function prints most informative outputs of SLURM 'sacct' for given job name 
and start date.

Usage: getjobinfo <job_name> <start_date>

The format of <start_date> must be: YYYY-MM-DD.
Automatically starts at 00:00:00 on <start_date>."
	elif [[ -z $2 ]]
	then
		echo \
"Missing <start_date>.

Usage: getjobinfo <job_name> <start_date>

The format of <start_date> must be: YYYY-MM-DD.
Automatically starts at 00:00:00 on <start_date>."
	else
		sacct --format="JobID%20,JobName,State,ExitCode,Start,End,\
Elapsed,CPUTime,ReqMem,MaxRSS,NCPUS" --name "$1" --starttime "${2}T00:00:00"
	fi
}


# Function to list the max memory usage (MaxRSS) for each job for 
# a specific job name
jobmem () {
	start_date=$(date -d "1 year ago" +%F)
	# Help message
	if (( $# < 2 )) || [[ $1 = "-h" ]] || [[ $1 = "--help" ]]
	then
		echo \
"Function to list or find the maximum of the max memory usage (MaxRSS) for 
each job listed by SLURM 'sacct' for a specific job name over the last year.

Usage: jobmem <option> <job_name>
Options:
  -m, --max:	return only the highest MaxRSS value for jobs with <job_name>
  -l, --list:	list MaxRSS values for jobs with <job_name> in human-readable
		format (e.g., KB/MB/GB)

Automatically starts at 00:00:00 1 year prior to today's date ($start_date)."
	elif [[ $1 = "--max" ]] || [[ $1 = "-m" ]] || \
[[ $1 = "-l" ]] || [[ $1 = "--list" ]]
	then
		jobids=$(getjobinfo $2 $start_date | grep "batch" | \
grep "COMPLETED\|OUT_OF_ME" | awk '{print $1}')
		rss=$(getjobinfo $2 $start_date | grep "batch" | \
grep "COMPLETED\|OUT_OF_ME" | awk '{print $9}')
		jobids=(${jobids// / })
		rss=(${rss// / })
		cnt=${#jobids[@]}
		max_m=0
		for ((i=0;i<cnt;i++))
		do
			j=${jobids[i]}
			# Remove unit and decimals
			m=`echo ${rss[i]} | sed 's/[A-Z.].*//g'`
			# Save unit
			m_unit=`echo ${rss[i]} | sed 's/[[:digit:].]*//g'`
			if [[ $1 = "--max" ]] || [[ $1 = "-m" ]]
			then
				[[ $m_unit = "M" ]] && m=$(( $m / 1000 ))
				if (( $m > $max_m ))
				then
					max_j=$j; max_m=$m; max_m_unit=$m_unit
				fi
			fi
			[[ $max_m ]] && (( $max_m != 0 )) && [[ $max_m_unit ]] \
&& m=$max_m && m_unit=$max_m_unit
			# Handles input in kilobytes (KB)
			if [[ $m_unit = "K" ]]
			then
				if (( `echo -n $m | wc -c` < 4 ))
				then
					mem="${m}KB"
				elif (( `echo -n $m | wc -c` < 7 ))
				then
					mem="$(( $m / 1000 ))MB"
				else
					mem="$(( $m / 1000000 ))GB"
				fi
			# Handles input in megabytes (MB)
			elif [[ $m_unit = "M" ]]
			then
				if (( `echo -n $m | wc -c` < 3 ))
				then
					mem="${m}MB"
				else
					mem="$(( $m / 1000 ))GB"
				fi
			else
				echo \ 
"Error - unrecognized unit of memory in ${m}: ${m_unit}.

Check output of 'MaxRSS' column from command 'getjobinfo $2 $start_date'.
This function only handes K and M unit inputs."
				break
			fi
			if [[ $1 = "--list" ]] || [[ $1 = "-l" ]]
			then
				printf "%s\t%s\n" "${j}" "${mem}"
			fi
		done
		if [[ $1 = "--max" ]] || [[ $1 = "-m" ]]
		then
			printf "%s\t%s\n" "${max_j}" "${mem}"
		fi
		unset -v jobids rss cnt i j max_j m max_m max_m_unit mem
	else
		echo "Error - unrecognized option: ${1}. Use the -h/--help \
flag for more information."
	fi
}


# Function to list elapsed time in seconds for each job listed by 
# SLURM 'sacct' for a specific job name
jobtime () {
	start_date=$(date -d "1 year ago" +%F)
	if (( $# < 2 )) || [[ $1 = "-h" ]] || [[ $1 = "--help" ]]
	then
		echo \
"Function to list or find the maximum of elapsed times (Elapsed) for each
job listed by SLURM 'sacct' for a specific job name over the year.

Usage: jobtime [option] <job_name>
Options:
  -m, --max:    return only greatest Elapsed time for jobs with <job_name>
  -l, --list:   list all Elapsed time values for jobs with <job_name> in
                seconds format

Automatically starts at 00:00:00 1 year prior to today's date ($start_date)."
	elif [[ $1 = "--max" ]] || [[ $1 = "-m" ]] || \
[[ $1 = "-l" ]] || [[ $1 = "--list" ]]
	then
		# Take  JobID and Elapsed columns from ony completed batch jobs
		jobids=`getjobinfo $2 $start_date | grep "batch" | \
grep "COMPLETED\|OUT_OF_ME" | awk '{print $1}'`
		elapsed=`getjobinfo $2 $start_date | grep "batch" | \
grep "COMPLETED\|OUT_OF_ME" | awk '{print $7}'`
		jobids=(${jobids// / })
		elapsed=(${elapsed// / })
		cnt=${#jobids[@]}
		max_t=0
		for ((i=0;i<cnt;i++))
		do
			j=${jobids[i]}
			t=`echo "${elapsed[i]}" | awk -F: '{ print ($1 * 3600) \
+ ($2 * 60) + $3 }'`
			if [[ $1 = "--list" ]] || [[ $1 = "-l" ]]
			then
				printf "%s\t%s\n" "${j}" "${t} seconds"
			elif [[ $1 = "--max" ]] || [[ $1 = "-m" ]]
			then
				if (( $t > $max_t ))
				then
					max_j=$j; max_t=$t
				fi
			fi
		done
		if [[ $1 = "--max" ]] || [[ $1 = "-m" ]]
		then
			printf "%s\t%s\n" "${max_j}" "${max_t} seconds"
			if (( $max_t >= 3600 ))
			then
				printf "\t\t%s\n" "~$(( $max_t / 3600 )) hours"
			elif (( $max_t < 3600 ))
			then
				printf "\t\t%s\n" "~$(( $max_t / 60 )) minutes"
			fi
		fi
		unset -v jobids elapsed cnt i t max_t j max_j
	else
		echo "Error - unrecognized option: ${1}. Use the -h/--help \
flag for more information."
	fi
}

